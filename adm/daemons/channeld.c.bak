// channeld.c 
// 2000-6-1 add channeld color and mapping
// By linux@jhyj :)
// 97-10-18 add intermud channel and emote capability
// By ken@XAJH & fuyo@XAJH 

#include <ansi.h>
#include <mudlib.h>
#include <net/dns.h>
#include <net/macros.h>

inherit F_DBASE;

#define BLOCK_CHAT      0
#define BLOCK_RUMOR     0
#define REMOTE_Q    "/adm/daemons/network/services/remote_q.c"

string remove_addresses(string, int all);

mapping channels = ([
          "sys":  ([      "msg_speak": HIR "『系统』%s：%s\n" NOR,
                          "msg_emote": HIR "『系统』%s" NOR,
			"wiz_only": 1 ]),
          "chat": ([      "msg_speak": HIC "『论道江湖』%s：%s\n" NOR,
                           "msg_emote": HIC "『论道江湖』%s" NOR,
			"msg_color": NOR+HIC,
			 ]),
          "rumor":([      "msg_speak": HIM "『江湖传闻』%s：%s \n" NOR,
                          "msg_emote": HIM "『江湖传闻』%s" NOR,
            		"msg_color": NOR+HIM,			
			"anonymous": "某人"
			]),
            "music":([      "msg_speak": HIY "『纵情高歌』%s：%s\n" NOR,
                          "msg_emote": HIY "『纵情高歌』%s" NOR,
            		"msg_color": NOR+HIY,			
        	]),
          "bidd": ([      "msg_speak": HIB "『新闻』%s：%s\n" NOR,
                          "msg_emote": HIB "『新闻』%s" NOR,
            		"msg_color": NOR+HIB,			
		]),
    	"adm":  ([      "msg_speak": HIW "%s: %s\n" NOR,
	                "msg_emote": HIW "%s" NOR,
            		"msg_color": NOR+HIW,
            		"arch_only": 1,
	        ]),
          "wiz":  ([      "msg_speak": HIY "『神族』"+HIY+"%s：%s\n" NOR,
                          "msg_emote": HIY "『神族』"+HIY+"%s" NOR,
            		"msg_color": NOR+HIY,           
            		"wiz_only": 1,
/*
            		"intermud": GCHANNEL,
            		"intermud_emote": 1, 
                        "filter": 1,
                        "filter": (: $1["VERSION"] == MUDLIB_VERSION :),
            		"channel": "wiz",
            		"omit_address": 0,
*/
        	]),
        "debug":([      "msg_speak": HIW "【调试】%s：%s\n" NOR,
                        "msg_emote": HIY "【调试】%s" NOR,
                        "wiz_only": 1,
        ]),
    	"gwiz": ([      "msg_speak": HIC "【网际巫师】"+HIC+"%s：%s\n" NOR,
            		"msg_emote": HIC "【网际巫师】"+HIC+"%s" NOR,
            		"wiz_only": 1,
            		"intermud": GCHANNEL,
            		"intermud_emote": 1,
            		"channel": "gwiz",
            		"msg_color": NOR+HIC,
            		"filter": 1,
            		"omit_address": 0, 
        	]),
     	"gbwiz":([      "msg_speak": BOLD "【大陆巫师】%s：%s\n" NOR,
                        "msg_emote": BOLD "【大陆巫师】%s" NOR,
                        "msg_color": NOR+BOLD,
                        "wiz_only": 1,
                        "intermud": GCHANNEL,
                        "intermud_emote": 1, 
                        "channel": "gbwiz",
                        "omit_address": 0, 
                        "filter":1,
                ]),
         "shout":([      "msg_speak": HIG "『%s』%s: %s\n" NOR,
                         "msg_emote": HIG "『%s』%s" NOR,
            		"msg_color": NOR+HIG,
        	]),
          "es":   ([      "msg_speak": BOLD "『网际闲聊』"+NOR+BOLD+"%s：%s\n" NOR,
                          "msg_emote": BOLD "『网际闲聊』"+NOR+BOLD+"%s" NOR,
            		"msg_color": NOR+BOLD,
            		"intermud": GCHANNEL,
            		"intermud_emote": 1,
            		"channel": "es",
            		"filter": 1,
            		"omit_address": 0, 
        	]),
          "jh":   ([     "msg_speak": HIY "『江湖』"+NOR+WHT+"%s：%s\n" NOR,
                          "msg_emote": HIY "『江湖』"+NOR+WHT+"%s" NOR,
            		"msg_color": NOR+WHT,
            		"intermud": GCHANNEL,
            		"intermud_emote": 1,
                         "channel": "ldj",
            		"filter": 1,
                        "filter": (: $1["VERSION"] == MUDLIB_VERSION :),
            		"omit_address": 0, 
        	]),
          "ldj":   ([     "msg_speak": HIY "『江湖』"+NOR+WHT+"%s：%s\n" NOR,
                         "msg_emote": HIY "『江湖』"+NOR+WHT+"%s" NOR,
                        "msg_color": NOR+WHT,
                        "intermud": GCHANNEL,
                        "intermud_emote": 1,
                        "channel": "ldj",
                        "filter": 1,
                        "filter": (: $1["VERSION"] == MUDLIB_VERSION :),
                        "omit_address": 0, 
                ]),

         "ldwiz":   ([   "msg_speak": HIR "『鹿鼎神族』"+NOR+WHT+"%s：%s\n" NOR,
                          "msg_emote": HIR "『鹿鼎神族』"+NOR+WHT+"%s" NOR,
            		"msg_color": NOR+WHT,
            		"wiz_only": 1,
            		"intermud": GCHANNEL,
            		"intermud_emote": 1,
            		"channel": "ldwiz",
            		"filter": 1,
                        "filter": (: $1["VERSION"] == MUDLIB_VERSION :),
            		"omit_address": 0, 
        	]),
]);

void create()
{
// This is required to pass intermud access check.
	seteuid(getuid());
	set("channel_id", "频道精灵");
}

varargs int do_channel(object me, string verb, string arg, int emote,int remote)
{
	object *ob;
	string *tuned_ch, who;
	string arg_bk,self_emote;
	self_emote=arg;

// Check if this is a channel emote.

	if ( userp(me) && (verb == "rumor"||verb == "rumor*"||verb == "rumor#") ) {
		if( me->query("jing") < 50 )
			return notify_fail("你已经没有精力散布谣言了。\n");
		if( !wizardp(me) )
			me->add("jing",-random(36) );
//		me->add("chat_last",1 );
	}    
 
	if( verb[sizeof(verb)-1] == '*') {
		emote = 1;
		verb = verb[0..<2];
	}
	if( verb[sizeof(verb)-1] == '#') {
		emote = 2;
		verb = verb[0..<2];
	}

// Check if this is a channel messsage.
	if( !mapp(channels) || undefinedp(channels[verb]) ) return 0;

// Check if this channel support emote message. 
	if( emote && undefinedp(channels[verb]["msg_emote"])  ) {
		write("对不起，这个频道不支持 emote 。\n");
		return 1;
	}
// Now we can be sure it's indeed a channel message:
	if (!stringp(arg) || arg == "" || arg == " ") arg = "...";
	else arg_bk = arg;
    
	if(remote) arg_bk = arg;

	// Check if one can write to channels
	// Only block rumor or chat...
        if ( userp(me) && !wizardp(me)){
                switch (verb){
                case "rumor" : if (time()-(int)me->query("chblk_channel/rumor")<3600 && ( verb == "rumor" || verb == "rumor*" ) )
                        return notify_fail("你的谣言频道被关闭了！\n");
                    break;
                case "chat"  : if (time()-(int)me->query("chblk_channel/chat")<3600 && ( verb == "chat" || verb == "chat*" ) )
                        return notify_fail("你的聊天频道被关闭了！\n");
                    break;
                case "shout" : if (time()-(int)me->query("chblk_channel/shout")<3600 && ( verb == "shout" || verb == "shout*" ) )
                        return notify_fail("你的门派频道被关闭了！\n");
                    break;
                case "es"    : if (time()-(int)me->query("chblk_channel/es")<3600 && ( verb == "es" || verb == "es*" ) )
                        return notify_fail("你的网际闲聊频道被关闭了！\n");
                    break;
                case "ldj"    : if (time()-(int)me->query("chblk_channel/jh")<3600 && ( verb == "ldj" || verb == "ldj*" ) )
                        return notify_fail("你的鹿鼎记频道被关闭了！\n");
                    break;
                }

        }

        if( userp(me) ) {
		if( channels[verb]["wiz_only"] && !wizardp(me))
			return 0;

		if( channels[verb]["arch_only"] && wiz_level(me)<wiz_level("(arch)"))
			return 0;

// Check if same channel message but not wizard
		if( !wizardp(me))
			if( arg==(string)me->query_temp("last_channel_msg") )
				return notify_fail("用交谈频道说话请不要重复相同的讯息。\n");

		if( userp(me) && !wizardp(me)) {
			me->set_temp("last_channel_msg", arg);
			me->add_temp("channel_msg_cnt", 1);
			if (me->query_temp("channel_msg_cnt")>5)
				if (time()-me->query_temp("chat_time")<2){
					me->set("chblk_channel/"+verb,time());
					do_channel( this_object(), "rumor", sprintf("系统精灵拿出一张狗皮膏药，在小火炉上细细地煨热以后，“啪”地捂住了%s的嘴巴。\n", me->name(1) ));
					return 1;
				}
				else {
                			me->set_temp("chat_time",time());
                			me->delete_temp("channel_msg_cnt");
	            		}
		}

// If we speaks something in this channel, then must tune it in.
		tuned_ch = me->query("channels");
		if( !pointerp(tuned_ch) )
			me->set("channels", ({ verb }) );
		else if( member_array(verb, tuned_ch)==-1 )
			me->set("channels", tuned_ch + ({ verb }) );
		}

// Support of channel emote
//	        if( emote && !channels[verb]["intermud_emote"]) {
		if( emote  && me->is_character() && !remote) {
			string vb, emote_arg, id, mud;

			if( sscanf(arg, "%s %s", vb, emote_arg)!= 2 ) {
				vb = arg;
				emote_arg = "";
			}

	        	if( channels[verb]["intermud_emote"] && sscanf(emote_arg, "%s@%s", id, mud)==2 ) {
				REMOTE_Q->send_remote_q(mud, verb, me->query("id"), id, vb);
				write("网路讯息已送出，请稍候。\n");
				return 1;
			}

        		if( channels[verb]["intermud_emote"] )
				arg = EMOTE_D->do_emote(me, vb, emote_arg, 3);
			else if( verb == "adm" ) {
		        	who = sprintf("%s", RANK_D->query_rank(me));
        			who = replace_string(who," ","");
				if ( wiz_level(me)==wiz_level("(sage)") )
					who = replace_string(who,HIR,"");
				if ( wiz_level(me)==wiz_level("(arch)") )
					who = replace_string(who,HIM,"");
	        		who = replace_string(who,NOR,"");
			        who +=me->name(1);
        			arg = EMOTE_D->do_emote(me, vb, emote_arg, 2, who);
			}
/*			
		        else if( verb == "rumor" )
				arg = EMOTE_D->do_emote(me, vb, emote_arg, 2, channels[verb]["anonymous"]);
	        	else arg = EMOTE_D->do_emote(me, vb, emote_arg, 1);
*/
			if( verb == "rumor" )
					arg = EMOTE_D->do_emote(me, vb, emote_arg, 2, 
					random(100)>10?channels[verb]["anonymous"]:
					me->name()+"(" + capitalize(me->query("id")) + ")"
					);
			else arg = EMOTE_D->do_emote(me, vb, emote_arg, 1);

	        	if (!arg && emote) {
// we should only allow chinese emote.
//                              if( (int)vb[0] < 160 ) return 0;
				arg = sprintf("%s(%s@%s)%s\n",me->name(),me->query("id"),Mud_name(),arg_bk);
				if( verb == "adm" ) {
					who = sprintf("%s", RANK_D->query_rank(me));
        				who = replace_string(who," ","");
				if ( wiz_level(me)==wiz_level("(sage)") )
					who = replace_string(who,HIR,"");
				if ( wiz_level(me)==wiz_level("(arch)") )
					who = replace_string(who,HIM,"");
	        		who = replace_string(who,NOR,"");
				who +=me->name(1);
                		arg = sprintf("%s%s\n",who,vb + " " + emote_arg);
			}
/*			
			if( verb == "rumor" ) {
				if( userp(me) )
					arg = sprintf("%s%s\n",channels[verb]["anonymous"],vb + " " + emote_arg);
			}
*/
               if( verb == "rumor") 
                {
                        if( userp(me) )
                                arg = sprintf("%s%s\n",random(100)>10 ? 
                                        channels[verb]["anonymous"]:me->name() + "(" +
                                        capitalize(me->query("id")) + ")",vb);
                        else
                                arg = sprintf("%s%s\n",channels[verb]["anonymous"],vb);
                }			
		}
		if( !arg ) {
			if( channels[verb]["anonymous"] ) 
				arg = channels[verb]["anonymous"]+vb+" "+emote_arg+"\n"; 
			else if( channels[verb]["intermud_emote"] )
				arg = sprintf("%s(%s@%s)%s %s\n", me->name(1), capitalize(me->query("id")), INTERMUD_MUD_NAME, vb, emote_arg);
			else arg = me->name()+vb+" "+emote_arg+"\n"; 
		}
	}

/*    
// Make the identity of speaker.
	if( channels[verb]["anonymous"] ) {
		who = channels[verb]["anonymous"];
//              if (userp(me))
//                      who=me->name(1) + "(" + capitalize(me->query("id")) + ")";
//              else
                        do_channel( this_object(), "sys", sprintf("是%s(%s)在造谣。", me->query("name"), me->query("id")) );
	}
	else if(me && (userp(me) || !stringp(who = me->query("channel_id")) )) {
	        if (me->name()!=me->name(1) && emote)
        	        do_channel( this_object(), "sys", sprintf(HIW"%s(%s)"+WHT+"扮%s!", me->name(1),me->query("id"),me->name()));
	        who = me->name(1) + "(" + capitalize(me->query("id")) + ")";
    	}
*/
        // Make the identity of speaker.
        if( channels[verb]["anonymous"] ) {
                if (userp(me)) {
                        who = random(100) > 10 ? channels[verb]["anonymous"]:me->name()
                                +"(" + capitalize(me->query("id")) + ")";
                        do_channel( this_object(), "sys", sprintf("%s(%s)正在向%s频道发出信息。",
                        me->query("name"),me->query("id"),verb) );
                }
                else    who = channels[verb]["anonymous"];
        }

	else if(me && (userp(me) || !stringp(who = me->query("channel_id")) )) {
	        if (me->name()!=me->name(1) && emote)
        	        do_channel( this_object(), "sys", sprintf(HIW"%s(%s)"+WHT+"扮%s!", me->name(1),me->query("id"),me->name()));
	        who = me->name(1) + "(" + capitalize(me->query("id")) + ")";
    	}
    	
// the channel "adm" modify by ken at 1998-06-19
	if( verb == "adm" ) {
		who = sprintf("%s", RANK_D->query_rank(me));
		who = replace_string(who," ","");
		if ( wiz_level(me)==wiz_level("(sage)") )
			who = replace_string(who,HIR,"");
		if ( wiz_level(me)==wiz_level("(arch)") )
			who = replace_string(who,HIM,"");
        	who = replace_string(who,NOR,"");
        	who +=(me->name(1)+"("+capitalize(me->query("id"))+")");
	}

// Ok, now send the message to those people listening us.
        if (verb=="shout"){
                if (!me->query("family/family_name"))
                        return notify_fail(YEL"你还没有加入任何门派！\n"NOR); 
                ob=filter_array( users(), "family_listener", this_object(), me->query("family/family_name") );
        }else
                ob = filter_array( users(), "filter_listener", this_object(), channels[verb] );


	if( !arg || arg == "" || arg == " " ) arg = "...";

        arg = replace_string(arg, "$BLK$", BLK);
        arg = replace_string(arg, "$RED$", RED);
        arg = replace_string(arg, "$GRN$", GRN);
        arg = replace_string(arg, "$YEL$", YEL);
        arg = replace_string(arg, "$BLU$", BLU);
        arg = replace_string(arg, "$MAG$", MAG);
        arg = replace_string(arg, "$WHT$", WHT);
        arg = replace_string(arg, "$HIR$", HIR);
        arg = replace_string(arg, "$HIG$", HIG);
        arg = replace_string(arg, "$HIY$", HIY);
        arg = replace_string(arg, "$HIB$", HIB);
        arg = replace_string(arg, "$HIM$", HIM);
        arg = replace_string(arg, "$HIC$", HIC);
        arg = replace_string(arg, "$HIW$", HIW);
        arg = replace_string(arg, "$BLINK$", BLINK);
        arg = replace_string(arg, "$NOR$", NOR);

	if( emote ) {
        	string localmsg;
        	string ecol=channels[verb]["msg_color"];
        	if(remote) {
            	arg=arg_bk;
	        }

        	if (!stringp(arg)) return 0;

	       	localmsg = arg;

	        if ( channels[verb]["msg_emote"] )
        		localmsg = remove_addresses(arg, 0); // 98-1-22 14:30

	        if( channels[verb]["omit_address"] ) localmsg = remove_addresses(arg, 1);
        	else if( channels[verb]["intermud_emote"] ) localmsg = remove_addresses(arg, 0);

	        if(!stringp(localmsg)) return 0;
        		if (verb=="shout")
		                message( "channel:" + verb,sprintf( channels[verb]["msg_emote"],me->query("family/family_name"), replace_string(localmsg,NOR,ecol) ), ob );
            		else
	               		message( "channel:" + verb,  sprintf( channels[verb]["msg_emote"],replace_string(localmsg,NOR,ecol)), ob );
	}
	else
		if (verb=="shout")
			message( "channel:" + verb,sprintf( channels[verb]["msg_speak"],me->query("family/family_name"),who,arg ), ob );
		else
			message( "channel:" + verb, sprintf( channels[verb]["msg_speak"], who, arg ), ob );

	if( arrayp(channels[verb]["extra_listener"]) ) {
		channels[verb]["extra_listener"] -= ({ 0 });
		if( sizeof(channels[verb]["extra_listener"]) )
			channels[verb]["extra_listener"]->relay_channel(me, verb, arg);
	}
        
	if( !undefinedp(channels[verb]["intermud"]) && me->is_character()) {
		channels[verb]["intermud"]->send_msg(
		channels[verb]["channel"], me->query("id"), me->name(1), arg, emote,
		channels[verb]["filter"] );
	}

	return 1;
}

int filter_listener(object ppl, mapping ch)
{
    // Don't bother those in the login limbo.
    if( !environment(ppl) ) return 0;

    if( ch["arch_only"])
        if( userp(ppl) )
            if( wiz_level(ppl) < wiz_level("(arch)") )
                return 0;

    if( ch["wiz_only"] ) 
        if( userp(ppl) )    
            return wizardp(ppl);

    if( ch["es_only"] ) {
        if( wiz_level(ppl) > 0 ) return 1;
        if( ppl->query("age") > 23 ) return 1;
        return 0;
    }

    return 1;
}

void register_relay_channel(string channel)
{
    object ob;
    ob = previous_object();
    if( undefinedp(channels[channel]) || !ob) return;
    if( arrayp(channels[channel]["extra_listener"]) ) {
    if( member_array(ob, channels[channel]["extra_listener"]) >=0 ) return;
    channels[channel]["extra_listener"] += ({ ob });
    }
    else  channels[channel]["extra_listener"] = ({ ob });
}

string remove_addresses(string msg, int all)
{
    int i;
    mixed tmp;
    string pattern;

    if(!stringp(msg)) return msg;
    if( all )
        pattern = "[(][A-Za-z]+@[a-zA-Z]+[0-9]+[.]?[)]";
    else
        pattern = "[(][A-Za-z]+@"+Mud_name()+"[)]";

    tmp = reg_assoc(msg, ({pattern}), ({1}));

    if(!arrayp(tmp)) return msg;
    msg = "";
    for(i=0; i< sizeof(tmp[0]); i++)
        if( tmp[1][i] == 0 ) msg += tmp[0][i];
    return msg;
}
int family_listener(object ppl, string str)
{
        // Don't bother those in the login limbo.
        if( !environment(ppl)) return 0;
        
        if(wizardp(ppl) || ppl->query("family/family_name")==str ) return 1;
        else return 0;
}
